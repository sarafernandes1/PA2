Shader "Hidden/NewImageEffectShader 1"
{Properties
   {
       _MainTex ("Texture", 2D) = "white" {}
   }
   SubShader
   {
      Pass
      {
      // referenced the method of bitmap of iq : https://www.shadertoy.com/view/4dfXWj

        CGPROGRAM

      
         
         #define t _Time.y
         #define mod(x,y) (x-y*floor(x/y))
        
         #pragma vertex vert
         #pragma fragment frag

         #include "UnityCG.cginc"
         
         #define zoom 1.

         
         #define P(id,a,b,c,d,e,f,g,h) if( id == int(pos.y) ){ int pa = a+2*(b+2*(c+2*(d+2*(e+2*(f+2*(g+2*(h))))))); cha = floor(float(pa)/pow(2.0f, float(pos.x)-1.0) - 2.0 * floor(float(pa)/pow(2.0f, float(pos.x)-1.0) /2)); }

         struct appdata
         {
             float4 vertex : POSITION;
             float2 uv : TEXCOORD0;
         };
        
         struct v2f
         {
             float2 uv : TEXCOORD0;
             float4 vertex : SV_POSITION;
         };
        
         v2f vert(appdata v)
         {
             v2f o;
             o.vertex = UnityObjectToClipPos(v.vertex);
             o.uv = v.uv;
             return o;
         }

         sampler2D _MainTex;
         float4 _MainTex_TexelSize;
         
         float gray(float3 _i)
         {
             return _i.x*0.299+_i.y*0.587+_i.z*0.114;
         }

         fixed4 frag(v2f i) : SV_Target
         {
             float2 uv = float2(floor(i.uv.x / 8. / zoom) * 8. * zoom,floor(i.uv.y / 12. / zoom) * 12. * zoom) / float3(i.uv - 0.5, 1);
             float2 pos = float2(mod(i.uv.x / zoom,8.),mod(i.uv.y / zoom,12.));
             float4 tex = tex2D(_MainTex, i.uv);
             float cha = 0.;
        
             float g = gray(tex.xyz);
             if (g < .125)
             {
                 P(11,0,0,0,0,0,0,0,0);
                 P(10,0,0,0,0,0,0,0,0);
                 P(9,0,0,0,0,0,0,0,0);
                 P(8,0,0,0,0,0,0,0,0);
                 P(7,0,0,0,0,0,0,0,0);
                 P(6,0,0,0,0,0,0,0,0);
                 P(5,0,0,0,0,0,0,0,0);
                 P(4,0,0,0,0,0,0,0,0);
                 P(3,0,0,0,0,0,0,0,0);
                 P(2,0,0,0,0,0,0,0,0);
                 P(1,0,0,0,0,0,0,0,0);
                 P(0,0,0,0,0,0,0,0,0);
             }
             else if (g < .25) // .
             {
                 P(11,0,0,0,0,0,0,0,0);
                 P(10,0,0,0,0,0,0,0,0);
                 P(9,0,0,0,0,0,0,0,0);
                 P(8,0,0,0,0,0,0,0,0);
                 P(7,0,0,0,0,0,0,0,0);
                 P(6,0,0,0,0,0,0,0,0);
                 P(5,0,0,0,0,0,0,0,0);
                 P(4,0,0,0,1,1,0,0,0);
                 P(3,0,0,0,1,1,0,0,0);
                 P(2,0,0,0,0,0,0,0,0);
                 P(1,0,0,0,0,0,0,0,0);
                 P(0,0,0,0,0,0,0,0,0);
             }
             else if (g < .375) // ,
             {
                 P(11,0,0,0,0,0,0,0,0);
                 P(10,0,0,0,0,0,0,0,0);
                 P(9,0,0,0,0,0,0,0,0);
                 P(8,0,0,0,0,0,0,0,0);
                 P(7,0,0,0,0,0,0,0,0);
                 P(6,0,0,0,0,0,0,0,0);
                 P(5,0,0,0,0,0,0,0,0);
                 P(4,0,0,0,1,1,0,0,0);
                 P(3,0,0,0,1,1,0,0,0);
                 P(2,0,0,0,0,1,0,0,0);
                 P(1,0,0,0,1,0,0,0,0);
                 P(0,0,0,0,0,0,0,0,0);
             }
             else if (g < .5) // -
             {
                 P(11,0,0,0,0,0,0,0,0);
                 P(10,0,0,0,0,0,0,0,0);
                 P(9,0,0,0,0,0,0,0,0);
                 P(8,0,0,0,0,0,0,0,0);
                 P(7,0,0,0,0,0,0,0,0);
                 P(6,1,1,1,1,1,1,1,0);
                 P(5,0,0,0,0,0,0,0,0);
                 P(4,0,0,0,0,0,0,0,0);
                 P(3,0,0,0,0,0,0,0,0);
                 P(2,0,0,0,0,0,0,0,0);
                 P(1,0,0,0,0,0,0,0,0);
                 P(0,0,0,0,0,0,0,0,0);
             }
             else if (g < .625) // +
             {
                 P(11,0,0,0,0,0,0,0,0);
                 P(10,0,0,0,0,0,0,0,0);
                 P(9,0,0,0,1,0,0,0,0);
                 P(8,0,0,0,1,0,0,0,0);
                 P(7,0,0,0,1,0,0,0,0);
                 P(6,1,1,1,1,1,1,1,0);
                 P(5,0,0,0,1,0,0,0,0);
                 P(4,0,0,0,1,0,0,0,0);
                 P(3,0,0,0,1,0,0,0,0);
                 P(2,0,0,0,0,0,0,0,0);
                 P(1,0,0,0,0,0,0,0,0);
                 P(0,0,0,0,0,0,0,0,0);
             }
             else if (g < .75) // *
             {
                 P(11,0,0,0,0,0,0,0,0);
                 P(10,0,0,0,1,0,0,0,0);
                 P(9,1,0,0,1,0,0,1,0);
                 P(8,0,1,0,1,0,1,0,0);
                 P(7,0,0,1,1,1,0,0,0);
                 P(6,0,0,0,1,0,0,0,0);
                 P(5,0,0,1,1,1,0,0,0);
                 P(4,0,1,0,1,0,1,0,0);
                 P(3,1,0,0,1,0,0,1,0);
                 P(2,0,0,0,1,0,0,0,0);
                 P(1,0,0,0,0,0,0,0,0);
                 P(0,0,0,0,0,0,0,0,0);
             }
             else if (g < .875) // #
             {
                 P(11,0,0,0,0,0,0,0,0);
                 P(10,0,0,1,0,0,1,0,0);
                 P(9,0,0,1,0,0,1,0,0);
                 P(8,1,1,1,1,1,1,1,0);
                 P(7,0,0,1,0,0,1,0,0);
                 P(6,0,0,1,0,0,1,0,0);
                 P(5,0,1,0,0,1,0,0,0);
                 P(4,0,1,0,0,1,0,0,0);
                 P(3,1,1,1,1,1,1,1,0);
                 P(2,0,1,0,0,1,0,0,0);
                 P(1,0,1,0,0,1,0,0,0);
                 P(0,0,0,0,0,0,0,0,0);
             }
             else // @
             {
                 P(11,0,0,0,0,0,0,0,0);
                 P(10,0,0,1,1,1,1,0,0);
                 P(9,0,1,0,0,0,0,1,0);
                 P(8,1,0,0,0,1,1,1,0);
                 P(7,1,0,0,1,0,0,1,0);
                 P(6,1,0,0,1,0,0,1,0);
                 P(5,1,0,0,1,0,0,1,0);
                 P(4,1,0,0,1,0,0,1,0);
                 P(3,1,0,0,1,1,1,1,0);
                 P(2,0,1,0,0,0,0,0,0);
                 P(1,0,0,1,1,1,1,1,0);
                 P(0,0,0,0,0,0,0,0,0);
             }
        
             float3 col = tex.xyz / max(tex.x,max(tex.y,tex.z));
             return float4(cha * col,1.0f); 
         }

         ENDCG
      } 
   }
}